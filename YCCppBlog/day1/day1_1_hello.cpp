//
// Created by 杨充 on 2024/6/13.
// 1.1.1 C++简单介绍
//
#include <iostream>
using namespace std;


//1.1.1.1 面向对象程序设计
void test1_1_1_1();
//1.1.1.2 标准库
void test1_1_1_2();
//1.1.1.3 C++ 的使用场景
void test1_1_1_3();
//1.1.1.4 C++ 编译器编译
void test1_1_1_4();

//1.1.2.1 基本语法介绍
void test1_1_2_1();
//1.2.1.2 C++ 程序结构
void test1_1_2_2();
//1.1.2.3 编译 & 执行 C++ 程序
void test1_1_2_3();
//1.1.2.4 C++ 中的分号 & 语句块
void test1_1_2_4();

int main() {
    test1_1_1_1();
    test1_1_1_2();
    test1_1_1_3();
    test1_1_1_4();

    test1_1_2_1();
    test1_1_2_2();
    test1_1_2_3();
    test1_1_2_4();
    return 0;
}


//1.1.2.1 基本语法介绍
void test1_1_2_1() {
    //C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。现在让我们简要地看一下什么是类、对象，方法、即时变量。
    //对象 - 对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例。
    //类 - 类可以定义为描述对象行为/状态的模板/蓝图。
    //方法 - 从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作。
    //即时变量 - 每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的。
}

//1.1.2.2 C++ 程序结构
void test1_1_2_2() {
    //让我们看一段简单的代码，可以输出单词 Hello World。
    //C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 <iostream>。
    //下一行 using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。
    //下一行 // main() 是程序开始执行的地方 是一个单行注释。单行注释以 // 开头，在行末结束。
    //下一行 int main() 是主函数，程序从这里开始执行。
    //下一行 cout << "Hello World"; 会在屏幕上显示消息 "Hello World"。
    //下一行 return 0; 终止 main( )函数，并向调用进程返回值 0。
}

//1.1.2.3 编译 & 执行 C++ 程序
void test1_1_2_3() {
    //打开一个文本编辑器，添加上述代码。
    //保存文件为 hello.cpp。
    //打开命令提示符，进入到保存文件所在的目录。
    //键入 'g++ hello.cpp '，输入回车，编译代码。如果代码中没有错误，命令提示符会跳到下一行，并生成 a.out 可执行文件。
    //现在，键入 ' a.out' 来运行程序。
    //您可以看到屏幕上显示 ' Hello World '。
}

void add(int x , int y) {
    int a = x + y;
}
//1.1.2.4 C++ 中的分号 & 语句块
void test1_1_2_4() {
    //在 C++ 中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。
    //
    //例如，下面是三个不同的语句：
    int x ,y;
    x = y;
    y = y+1;
    add(x, y);

    //C++ 不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。例如：
    x = y; y = y+1; add(x, y);

    //语句块是一组使用大括号括起来的按逻辑连接的语句。例如：
    {
        cout << "Hello World"; // 输出 Hello World
    }
}
