apply plugin: 'com.android.library'
apply from: rootProject.projectDir.absolutePath + "/yc.gradle"

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    //buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true


        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                //提供给C++编译器的一个标志 可选
                cppFlags ""
                //声明当前Cmake项目使用的Android abi
                //abiFilters "armeabi-v7a"
                //提供给Cmake的参数信息 可选
                //arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"
                //提供给C编译器的一个标志 可选
                //cFlags "-D__STDC_FORMAT_MACROS"
                //指定哪个so库会被打包到apk中去 可选
                //targets "libexample-one", "my-executible-demo"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            buildConfigField "boolean", "IS_NET_DEBUG", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //CMake的NDK项目它有自己一套运行流程
    //Gradle 调用外部构建脚本CMakeLists.txt
    //CMake 按照构建脚本的命令将 C++ 源文件 testjnilib.cpp 编译到共享的对象库中，并命名为 libtestjnilib.so ，Gradle 随后会将其打包到APK中
    externalNativeBuild {
        cmake {
            //声明cmake配置文件路径
            path "src/main/cpp/CMakeLists.txt"
            //声明cmake版本，这个需要和在SDK Manager中切换CMake版本匹配
            version "3.10.2"
        }
    }

//    //打包改名
//    android.libraryVariants.all { variant ->
//        variant.outputs.all {
//            //名称_版本号_日期.apk
//            outputFileName = "serialport_v${defaultConfig.versionName}_${releaseTime()}.aar"
//        }
//    }

    task makeJar(type: Copy) {
        //删除存在的
        delete 'build/libs/mysdk.jar'
        //设置拷贝的文件
        from('build/intermediates/aar_main_jar/release/')
        //打进jar包后的文件目录
        into('output/libs/')
        //将classes.jar放入build/libs/目录下 //include ,exclude参数来设置过滤 //（我们只关心classes.jar这个文件）
        include('serialport.jar')
        //重命名
        rename('serialport.jar', 'mysdk.jar')
    }
    makeJar.dependsOn(build)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(rootProject.ext.dependencies["appcompat"])
    implementation(rootProject.ext.dependencies["annotation"])
}
